name: Copilot Development Environment Setup

on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'Type of setup to perform'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - python-only
          - docker-only

jobs:
  setup-environment:
    name: Setup Development Environment
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'python-only' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'python-only' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up Docker Buildx
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'docker-only' }}
        uses: docker/setup-buildx-action@v3

      - name: Create development directories
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'python-only' }}
        run: |
          mkdir -p app/config
          mkdir -p app/data
          mkdir -p games
          chmod 755 app/config app/data games

      - name: Validate Python application structure
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'python-only' }}
        run: |
          echo "Validating Python application structure..."
          python -c "
          import os
          import sys
          
          # Check if main application files exist
          required_files = [
              'app/app.py',
              'app/auth.py', 
              'app/constants.py',
              'app/db.py',
              'requirements.txt',
              'Dockerfile'
          ]
          
          missing_files = []
          for file in required_files:
              if not os.path.exists(file):
                  missing_files.append(file)
          
          if missing_files:
              print(f'Missing required files: {missing_files}')
              sys.exit(1)
          else:
              print('All required application files are present')
          "

      - name: Test Python imports
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'python-only' }}
        run: |
          echo "Testing Python imports..."
          cd app
          python -c "
          try:
              import flask
              import flask_login
              import flask_sqlalchemy
              import yaml
              import requests
              import watchdog
              import werkzeug
              print('âœ“ All required Python packages imported successfully')
          except ImportError as e:
              print(f'âœ— Import error: {e}')
              exit(1)
          "

      - name: Validate Flask application
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'python-only' }}
        run: |
          echo "Validating Flask application..."
          cd app
          python -c "
          import os
          os.environ['FLASK_ENV'] = 'development'
          
          try:
              from app import app
              with app.app_context():
                  print('âœ“ Flask application initialized successfully')
          except Exception as e:
              print(f'âœ— Flask application validation failed: {e}')
              exit(1)
          "

      - name: Test Docker build
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'docker-only' }}
        run: |
          echo "Testing Docker build..."
          docker build -t ownfoil-test:latest .
          echo "âœ“ Docker build completed successfully"

      - name: Test Docker compose configuration
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'docker-only' }}
        run: |
          echo "Validating docker-compose configuration..."
          docker compose config
          echo "âœ“ Docker compose configuration is valid"

      - name: Generate development configuration
        if: ${{ github.event.inputs.setup_type == 'full' || github.event.inputs.setup_type == 'python-only' }}
        run: |
          echo "Generating development configuration..."
          mkdir -p app/config
          cat > app/config/settings.yaml << EOF
          library:
            paths:
              - "./games"
          titles:
            language: "en"
            region: "US"
            valid_keys: false
          shop:
            motd: "Welcome to your development shop!"
            public: false
            encrypt: true
            clientCertPub: "-----BEGIN PUBLIC KEY-----"
            clientCertKey: "-----BEGIN PRIVATE KEY-----"
            host: ""
            hauth: ""
          EOF
          echo "âœ“ Development configuration created"

      - name: Setup development environment summary
        run: |
          echo "## Development Environment Setup Complete ðŸš€" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Setup Type: ${{ github.event.inputs.setup_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Start Commands:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.setup_type }}" == "full" || "${{ github.event.inputs.setup_type }}" == "python-only" ]]; then
            echo "#### Python Development:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo '# Install dependencies' >> $GITHUB_STEP_SUMMARY
            echo 'pip install -r requirements.txt' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '# Run the application' >> $GITHUB_STEP_SUMMARY
            echo 'cd app' >> $GITHUB_STEP_SUMMARY
            echo 'python app.py' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '# Access the application at http://localhost:8465' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ github.event.inputs.setup_type }}" == "full" || "${{ github.event.inputs.setup_type }}" == "docker-only" ]]; then
            echo "#### Docker Development:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo '# Build and run with Docker' >> $GITHUB_STEP_SUMMARY
            echo 'docker build -t ownfoil .' >> $GITHUB_STEP_SUMMARY
            echo 'docker run -p 8465:8465 -v $(pwd)/games:/games ownfoil' >> $GITHUB_STEP_SUMMARY
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '# Or use docker-compose' >> $GITHUB_STEP_SUMMARY
            echo 'docker-compose up -d' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Project Structure:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo 'app/' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ app.py              # Main Flask application' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ auth.py             # Authentication blueprint' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ constants.py        # Application constants' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ db.py              # Database models' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ settings.py        # Configuration management' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ shop.py            # Tinfoil shop functionality' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ library.py         # Library management' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ config/            # Configuration files' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ data/              # Application data' >> $GITHUB_STEP_SUMMARY
          echo 'â”œâ”€â”€ static/            # CSS, JS, images' >> $GITHUB_STEP_SUMMARY
          echo 'â””â”€â”€ templates/         # Jinja2 HTML templates' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Default Admin User:" >> $GITHUB_STEP_SUMMARY
          echo "Create your first admin user through the web interface at http://localhost:8465/settings" >> $GITHUB_STEP_SUMMARY

  validate-setup:
    name: Validate Complete Setup
    needs: setup-environment
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.setup_type == 'full' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration test
        run: |
          echo "Running integration test..."
          cd app
          timeout 30s python app.py &
          APP_PID=$!
          
          # Wait for application to start
          sleep 10
          
          # Test if application is responding
          if curl -f http://localhost:8465 > /dev/null 2>&1; then
            echo "âœ“ Application is responding on port 8465"
            echo "âœ“ Integration test passed"
          else
            echo "âœ— Application is not responding"
            exit 1
          fi
          
          # Clean up
          kill $APP_PID 2>/dev/null || true

      - name: Validation summary
        run: |
          echo "## Validation Complete âœ…" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Ownfoil development environment has been successfully set up and validated." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Clone the repository to your local machine" >> $GITHUB_STEP_SUMMARY
          echo "2. Follow the setup commands from the previous step" >> $GITHUB_STEP_SUMMARY
          echo "3. Start developing!" >> $GITHUB_STEP_SUMMARY