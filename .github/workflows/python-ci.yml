name: Python CI

on:
  push:
    branches: [ master, develop ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/python-ci.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - '**.py'
      - 'requirements.txt'
      - '.github/workflows/python-ci.yml'

permissions:
  contents: read
  security-events: write
  checks: write
  pull-requests: write

jobs:
  lint-and-format:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    concurrency:
      group: ${{ github.workflow }}-lint-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pylint isort mypy bandit safety
          pip install -r requirements.txt

      - name: Check import sorting with isort
        run: |
          isort --check-only --diff app/

      - name: Check code formatting with black
        run: |
          black --check --diff app/

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Lint with pylint
        run: |
          pylint app/ --exit-zero --output-format=text --reports=yes

      - name: Type checking with mypy
        run: |
          mypy app/ --ignore-missing-imports --no-strict-optional || true

      - name: Security scanning with bandit
        run: |
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ -f txt || true

      - name: Check for known security vulnerabilities in dependencies
        run: |
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    concurrency:
      group: ${{ github.workflow }}-test-${{ matrix.python-version }}-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock pytest-flask coverage[toml]
          pip install -r requirements.txt

      - name: Create test directories
        run: |
          mkdir -p app/config app/data games
          chmod 755 app/config app/data games

      - name: Run syntax check
        run: |
          python -m py_compile app/*.py

      - name: Test Flask application imports
        run: |
          cd app
          python -c "
          import os
          import sys
          
          # Test basic imports
          try:
              import flask
              import flask_login
              import flask_sqlalchemy
              import yaml
              import requests
              import watchdog
              import werkzeug
              print('✓ All required packages imported successfully')
          except ImportError as e:
              print(f'✗ Import error: {e}')
              sys.exit(1)
          "

      - name: Test Flask application structure
        run: |
          cd app
          python -c "
          import os
          import sys
          
          # Set environment for testing
          os.environ['FLASK_ENV'] = 'testing'
          
          try:
              # Test that main modules can be imported
              import constants
              import db
              import settings
              print('✓ Core modules imported successfully')
              
              # Test Flask app creation (without running)
              from app import app
              print('✓ Flask application created successfully')
              
          except Exception as e:
              print(f'✗ Application structure test failed: {e}')
              sys.exit(1)
          "

      - name: Generate coverage report
        run: |
          cd app
          coverage run -m pytest -v --tb=short || true
          coverage report -m || true
          coverage xml -o ../coverage.xml || true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  validate-application:
    name: Application Validation
    runs-on: ubuntu-latest
    needs: [lint-and-format, test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create required directories
        run: |
          mkdir -p app/config app/data games
          chmod 755 app/config app/data games

      - name: Test application startup
        timeout-minutes: 2
        run: |
          cd app
          # Start the application in background
          timeout 30s python app.py &
          APP_PID=$!
          
          # Wait for application to start
          sleep 15
          
          # Test if application is responding
          if curl -f http://localhost:8465 > /dev/null 2>&1; then
            echo "✓ Application is responding on port 8465"
          else
            echo "✗ Application is not responding"
            exit 1
          fi
          
          # Clean up
          kill $APP_PID 2>/dev/null || true
          wait $APP_PID 2>/dev/null || true

      - name: Validation Summary
        if: success()
        run: |
          echo "## ✅ Application Validation Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Ownfoil application passed all validation tests:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality and linting" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Application startup" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ HTTP response validation" >> $GITHUB_STEP_SUMMARY